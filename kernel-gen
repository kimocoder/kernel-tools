#!/usr/bin/python
# -*- coding: utf-8; mode: python; tab-width: 3; indent-tabs-mode: nil -*-
#
# Copyright 2012, 2013, 2014, 2015
# Raffaello D. Di Napoli
#
# This file is part of kernel-tools.
#
# kernel-tools is free software: you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# kernel-tools is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with kernel-tools. If not,
# see <http://www.gnu.org/licenses/>.
#---------------------------------------------------------------------------------------------------

"""Generates a kernel binary+modules and/or tarball, optionally generating an initramfs from a
compatible initramfs building system such as tinytium.
"""

import sys

####################################################################################################
# Globals

def main(iterArgs):
   """Implementation of __main__.

   iterable(str*) iterArgs
      Command-line arguments.
   int return
      Command return status.
   """

   import argparse
   import kerneltools
   import os
   import re

   argparser = argparse.ArgumentParser(add_help = False)
   argparser.add_argument(
      '-a', '--arch', metavar = 'ARCH',
      help = 'Build a kernel for the specified ARCHitecture. Defaults to Portage\'s ARCH variable.'
   )
   argparser.add_argument(
      '--help', action = 'help',
      help = 'Show this informative message and exit.'
   )
   argparser.add_argument(
      '-i', '--initramfs', metavar = 'DIR', default = True,
      help = 'Use DIR as an initramfs source directory. Defaults to `${ROOT}/usr/src/initramfs\'.'
   )
   argparser.add_argument(
      '--initramfs-debug', action = 'store_true', default = False,
      help = 'Dump the contents of the generated initramfs before packaging it.'
   )
   argparser.add_argument(
      '--no-initramfs', dest = 'initramfs', action = 'store_false',
      help = 'Ignore the initramfs directory, even if existent.'
   )
   argparser.add_argument(
      '--no-install', dest = 'install', action = 'store_false', default = True,
      help = 'Don\'t install the compiled kernel, only build/package it.'
   )
   argparser.add_argument(
      '--no-rebuild-out-of-tree-modules', dest = 'rebuild_out_of_tree_modules',
      action = 'store_false', default = True,
      help = 'Don\'t rebuild packages providing out-of-tree (external) modules.'
   )
   argparser.add_argument(
      '-r', '--root', metavar = 'DIR',
      help = 'Use DIR as root directory. Defaults to Portage\'s ${ROOT}.'
   )
   argparser.add_argument(
      '-s', '--source', metavar = 'DIR', default = os.getcwd(),
      help = 'Select DIR as the kernel source directory. Defaults to the current directory or ' +
             '`${ROOT}/usr/src/linux\'.'
   )
   argparser.add_argument(
      '-v', '--verbose', action = 'store_true', default = False,
      help = 'Enable extended output (mainly from the package manager).'
   )
   args = argparser.parse_args()

   gen = kerneltools.Generator(
      sPArch = args.arch,
      sIrfSourcePath = args.initramfs,
      sRoot = args.root,
      sSourcePath = args.source
   )
   gen.prepare()
   gen.build_kernel(args.rebuild_out_of_tree_modules)
   if gen.with_initramfs():
      gen.build_initramfs(args.initramfs_debug)
   gen.package()
   if args.install:
      gen.install()
   return 0

if __name__ == '__main__':
   sys.exit(main(sys.argv))
