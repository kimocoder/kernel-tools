1. Introduction
---------------

Kernel-tools is a set of utilities to (re-)generate a kernel binary and modules
and/or tarball, with support for generating an initramfs from a compatible
initramfs building system such as tinytium.


2. How to use
-------------

The kernel-tools suite comprises these components:

kernel-gen
   Generates a kernel binary+modules and/or tarball, optionally generating an
   initramfs from a compatible initramfs building system such as tinytium. See
   also § 2.1. Using kernel-gen.

kernel-lsext
   Lists external firmware and/or modules for Linux along with the packages that
   installed them.


2.1. Using kernel-gen
---------------------

Prior to running kernel-gen, a kernel source code folder must be configured
(make menuconfig). Once that’s done, kernel-gen can be directed to the correct
folder by either creating a symlink to it at /usr/src/linux, or by passing a
--source argument.


2.1.1. Building the kernel
--------------------------

kernel-gen will build the selected kernel using as much of the Portage’s
configuration as possible (e.g. distcc settings, make flags).

Before running make, kernel-gen will inspect the kernel configuration (.config)
to make sure that no settings will result in the kernel being unable to use the
initramfs, if one is to be built (see § 2.1.2. Building an initramfs).

After the kernel image has been generated, kernel-gen will rebuild all external
modules to make them compatible with the just-built image, unless
--no-rebuildmods is specified.


2.1.2. Building an initramfs
----------------------------

Perhaps the most useful feature of kernel-gen is its ability to rebuild an
initramfs to include the in-tree an external kernel modules that have been just
built.

kernel-gen supports using for an initramfs either a folder with the initramfs
contents, or a folder containing at least an executable named “build”, which
will be invoked from within the temporary working directory which kernel-gen
will create the initramfs archive from. Additionally, these environment
variables are passed to the build program:

   ARCH
      Target architecture, using the Linux kernel’s naming convention.
   CROSS_COMPILE
      Cross-compiling toolchain prefix.
   PORTAGE_ARCH
      Target architecture, using Portage’s naming convention.

The build program will be responsible for adding any additional files to the
working directory, which will then be taken as-is to generate the initramfs
archive.

For kernel-gen to pick an initramfs and enable the generation of the initramfs
archive, a symlink to it must be created at /usr/src/initramfs, or the path to
it must be passed using the --initramfs argument to kernel-gen.

When debugging the initramfs’s build program, passing the argument
--initramfs-debug will generate a dump of the contents of the initramfs just
before it is packaged.


2.1.3. Installing the generated kernel and initramfs
----------------------------------------------------

Unless instructed not to by using the --no-install command line argument,
kernel-gen will install the generated kernel and initramfs to what Portage
considers to be ${ROOT}; this can be overridden by specifying --root with a
different path.

The files installed will be:

•  Kernel (compressed) image (e.g. /boot/linux-3.10.2)
•  Kernel initramfs (compressed) archive (e.g. /boot/initramfs-3.10.2.cpio.lzo)
•  Kernel configuration (e.g. /boot/config-3.10.2)
•  Kernel symbol table (e.g. /boot/System.map-3.10.2)
•  Kernel in-tree and external modules (e.g. /lib/modules/3.10.2)


2.1.4. Packaging the kernel
---------------------------

kernel-gen is also able to generate a tarball containing all the files that
would be installed (see § 2.1.3. Installing the generated kernel and initramfs);
this can be used to build a kernel package for a different system.

TODO: generate a Portage binary package.




--------------------------------------------------------------------------------
Copyright 2012, 2013, 2014
Raffaello D. Di Napoli

This file is part of kernel-tools.

kernel-tools is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

kernel-tools is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
kernel-tools. If not, see <http://www.gnu.org/licenses/>.
