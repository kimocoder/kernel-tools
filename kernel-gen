#!/usr/bin/python
# -*- coding: utf-8; mode: python; tab-width: 3; indent-tabs-mode: nil -*-
#
# Copyright 2012, 2013, 2014, 2015
# Raffaello D. Di Napoli
#
# This file is part of kernel-tools.
#
# kernel-tools is free software: you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# kernel-tools is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with kernel-tools. If not,
# see <http://www.gnu.org/licenses/>.
#---------------------------------------------------------------------------------------------------

"""Generates a kernel binary+modules and/or tarball, optionally generating an initramfs from a
compatible initramfs building system such as tinytium.
"""

####################################################################################################
# __main__

if __name__ == '__main__':
   import kerneltools
   import os
   import re
   import sys

   # Set option defaults.
   sPArch = None
   sIrfSourceDir = True
   bIrfDebug = False
   bInstall = True
   sPackageFile = None
   bRebuildModules = True
   sRoot = None
   sSourceDir = os.getcwd()

   # Scan the command line.
   for sArg in sys.argv[1:]:
      # Discard this argument.
      if sArg == '-a' or sArg.startswith('--arch='):
         sPArch = re.sub(r'[^=]+=', '', sArg)
      elif sArg == '-i' or sArg.startswith('--initramfs='):
         sIrfSourceDir = os.path.abspath(re.sub(r'[^=]+=', '', sArg))
      elif sArg == '--initramfs-debug':
         bIrfDebug = True
      elif sArg == '--no-initramfs':
         sIrfSourceDir = None
      elif sArg == '--no-install':
         bInstall = False
      elif sArg == '--no-rebuildmods':
         bRebuildModules = False
      elif sArg == '-p' or sArg.startswith('--package='):
         sPackageFile = os.path.abspath(re.sub(r'[^=]+=', '', sArg))
      elif sArg == '-r' or sArg.startswith('--root='):
         sRoot = os.path.abspath(re.sub(r'[^=]+=', '', sArg))
      elif sArg == '-s' or sArg.startswith('--source='):
         sSourceDir = os.path.abspath(re.sub(r'[^=]+=', '', sArg))
      elif sArg == '-v' or sArg == '--verbose':
         os.environ['KG_VERBOSE'] = '1'
      elif sArg == '--':
         break
      else:
         import textwrap
         sys.stdout.write(textwrap.dedent("""\
            Usage: kernel-gen [options]
            Possible options:
            -a, --arch=ARCH         Build a kernel for the specified ARCHitecture. Defaults
                                    to Portage's ARCH variable.
            -i, --initramfs=DIR     Use DIR as an initramfs source directory. Defaults to
                                    `${ROOT}/usr/src/initramfs'.
                --initramfs-debug   Dumps the contents of the generated initramfs before
                                    packaging it.
                --help              Show this informative message and quit.
                --no-initramfs      Ignore the initramfs directory, even if existent.
                --no-install        Don't install the compiled kernel; also ignores --root
                                    and --no-rebuildmods.
                --no-rebuildmods    Don't rebuild packages providing external modules;
                                    delete the module files instead.
            -p, --package=FILE      Copy the kernel to a compressed tar archive named FILE.
            -r, --root=DIR          Use DIR as root directory. Defaults to Portage's
                                    ${ROOT}.
            -s, --source=DIR        Select DIR as the kernel source directory. Defaults to
                                    the current directory or `${ROOT}/usr/src/linux'.
            -v, --verbose           Enable extended output (mainly from the package manager)
         """))
         if sArg == '--help':
            sys.exit(0)
         else:
            sys.exit(1)

   gen = kerneltools.Generator(
      sPArch = sPArch,
      sIrfSourceDir = sIrfSourceDir,
      bIrfDebug = bIrfDebug,
      bRebuildModules = bRebuildModules,
      sRoot = sRoot,
      sSourceDir = sSourceDir
   )
   gen.prepare()
   gen.build_kernel()
   if gen.should_build_initramfs():
      gen.build_initramfs()
   if bInstall:
      gen.install()
   if sPackageFile:
      gen.package(sPackageFile)

   sys.exit(0)
